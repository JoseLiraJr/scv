unit uVendaController;

interface

uses
  System.SysUtils, Data.DB, Venda;

type
  TVendaController = class
  private
    FVenda: TVenda;
    procedure SetVenda(const Value: TVenda);
  public
    procedure Open(dtSources : array of TDataSource);
    procedure Cancel(dtSource : TDataSource);
    procedure ValidaPost(codCliente : Integer; vlrVenda : Double);
    function Save : Integer;
    property Venda : TVenda read FVenda write SetVenda;

    constructor Create;
    destructor Destroy; override;
  end;

implementation

{ TVendaController }

procedure TVendaController.Cancel(dtSource: TDataSource);
begin
  if not(venda.Cancel(dtSource)) then
    raise Exception.Create('Erro ao tentar cancelar a operação!');
end;

constructor TVendaController.Create;
begin
  Venda := TVenda.Create;
  Inherited Create;
end;

destructor TVendaController.Destroy;
begin
  Venda.Free;
  inherited Destroy;
end;

procedure TVendaController.Open(dtSources: array of TDataSource);
var
  ds : TDataSource;
begin
  if not(Venda.Open(dtSources)) then
    raise Exception.Create('Erro ao tentar abrir as tabelas do Sistema!');

  for ds in dtSources do
  begin
    if (ds.Name = 'dsCliente') then
      begin
        if (ds.DataSet.IsEmpty) then
          raise Exception.Create('Nenhum Cliente cadastrado no sistema!');
      end;
    if (ds.Name = 'dsProduto') then
      begin
        if (ds.DataSet.IsEmpty) then
          raise Exception.Create('Nenhum Produto cadastrado no sistema!');
      end;
  end;
end;

function TVendaController.Save: Integer;
begin
  Result := Venda.Save;
end;

procedure TVendaController.SetVenda(const Value: TVenda);
begin
  FVenda := Value;
end;

procedure TVendaController.ValidaPost(codCliente: Integer; vlrVenda: Double);
begin
  if (codCliente < 1) then
    raise Exception.Create('Informe um cliente antes de gravar a venda!');

  if (vlrVenda <= 0) then
    raise Exception.Create('Uma venda deve possuir um valor!');
end;

end.
